<script runat="server">
Platform.Load("core", "1");

try {
    // Helper function for logging
    function logDebug(msg) {
        try {
            var logDE = DataExtension.Init("8BF29E68-F498-4A4F-BE50-E1CE24B7C300");
            if (logDE) {
                logDE.Rows.Add({ Date: new Date(), Note: "[AUTO] " + msg });
            }
        } catch (e) {
            // Silent fail
        }
    }
    
    logDebug("=== Automation Started ===");
    logDebug("Triggering CloudPage to collect Journey history");
    
    // Your CloudPage URL
    var cloudPageUrl = "https://cloud.info.stib-mivb.brussels/JourneyHistoryCollector-v2";
    
    logDebug("CloudPage URL: " + cloudPageUrl);
    
    // Trigger the CloudPage via HTTPGet
    try {
        logDebug("Attempting to trigger CloudPage via HTTPGet");
        
        var response = Platform.Function.HTTPGet(cloudPageUrl);
        
        if (response) {
            logDebug("CloudPage triggered successfully");
            logDebug("Response received, length: " + String(response).length + " characters");
            
            // Check if response indicates success
            if (String(response).indexOf("Complete") > -1 || String(response).indexOf("Processed") > -1) {
                logDebug("SUCCESS: CloudPage execution completed successfully");
            } else if (String(response).indexOf("ERROR") > -1) {
                logDebug("WARNING: CloudPage reported errors - check Dashboard_DailyLog");
            } else {
                logDebug("INFO: CloudPage executed, check Dashboard_DailyLog for details");
            }
        } else {
            logDebug("WARNING: Empty response from CloudPage");
        }
        
    } catch (httpEx) {
        logDebug("ERROR: Failed to trigger CloudPage - " + httpEx.toString());
        logDebug("NOTE: You may need to trigger the CloudPage manually");
    }
    
    logDebug("=== Automation Completed ===");
    logDebug("Review Dashboard_DailyLog for CloudPage execution details");
    logDebug("Review Dashboard_JourneyDailyEntries for entry count results");
    
} catch (ex) {
    try {
        var logDE = DataExtension.Init("8BF29E68-F498-4A4F-BE50-E1CE24B7C300");
        if (logDE) {
            logDE.Rows.Add({ 
                Date: new Date(), 
                Note: "[AUTO] FATAL ERROR: " + ex.toString() 
            });
        }
    } catch (logEx) {
        // Ultimate fallback - script will fail silently
    }
}
</script>
