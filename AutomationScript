<script runat="server">
Platform.Load("Core", "1.1.1");

var LOG_DE_KEY = "8BF29E68-F498-4A4F-BE50-E1CE24B7C300";
var WORKER_URL = "https://cloud.info.stib-mivb.brussels/Dashboard-CollectJourneyEntries";
var executionId = Platform.Function.GUID();

function toLocalNow() {
    try {
        return Platform.Function.SystemDateToLocalDate(new Date());
    } catch (ex) {
        return new Date();
    }
}

var logDE;
function safeLog(stage, message) {
    try {
        if (!logDE) {
            logDE = DataExtension.Init(LOG_DE_KEY);
        }

        var formattedDate = Platform.Function.FormatDate(toLocalNow(), "yyyy-MM-dd HH:mm:ss");
        logDE.Rows.Add({
            Date: formattedDate,
            Note: "[AUTO " + executionId + "] " + stage + " - " + message
        });
    } catch (logEx) {
        // swallow logging failure to avoid breaking the run
    }
}

try {
    safeLog("START", "Automation execution started");

    var payloadObject = {
        trigger: "automation-studio",
        executionId: executionId,
        invokedAt: new Date().toISOString()
    };
    var payload = Platform.Function.Stringify(payloadObject);

    var headers = ["Content-Type", "User-Agent", "X-Execution-Id"];
    var headerValues = [
        "application/json",
        "AutomationStudio-DataCollectionWorker",
        executionId
    ];

    safeLog("BEFORE_HTTP_POST", "Invoking worker CloudPage at " + WORKER_URL);
    var response = HTTP.Post(WORKER_URL, "application/json", payload, headers, headerValues);
    safeLog("AFTER_HTTP_POST", "Status: " + response.StatusCode);

    var responseBody = "";
    if (response.Response && response.Response.length > 0 && response.Response[0]) {
        responseBody = response.Response[0];
    }

    safeLog("WORKER PAGE CALLED", "HTTP " + response.StatusCode + "; response: " + (responseBody.length > 200 ? responseBody.substring(0, 200) + "..." : responseBody));

    if (response.StatusCode < 200 || response.StatusCode >= 300) {
        throw new Error("Worker returned HTTP status " + response.StatusCode);
    }

    safeLog("FINAL", "Automation run completed successfully");
} catch (ex) {
    safeLog("ERROR", String(ex));
    throw ex;
} finally {
    safeLog("END", "Automation script finished");
}
</script>
