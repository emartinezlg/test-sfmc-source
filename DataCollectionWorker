<script runat="server">
Platform.Load("Core", "1.1.1");

var LOG_DE_KEY = "8BF29E68-F498-4A4F-BE50-E1CE24B7C300";
var CONFIG_DE_KEY = "C2B8BD86-B9B4-490F-A5C6-5F3B0088A10B";
var DAILY_DE_KEY = "7C5E411C-0258-4B6D-BA21-58AD4BDCCDAC";
var AUTH_BASE = "https://mcps4dq7y851bybsng90p082fjq0.auth.marketingcloudapis.com";
var REST_BASE = "https://mcps4dq7y851bybsng90p082fjq0.rest.marketingcloudapis.com";
var CLIENT_ID = "c6hbg0vskfdflfwef87nszlo";
var CLIENT_SECRET = "SlNAdFuk63zs7EoYzdOmXOjX";

var requestContext = {
    executionId: Platform.Request.GetRequestHeader("X-Execution-Id") || Platform.Function.GUID(),
    method: Platform.Request.Method || "GET",
    userAgent: Platform.Request.GetRequestHeader("User-Agent") || "unknown"
};

function toLocal(date) {
    try {
        return Platform.Function.SystemDateToLocalDate(date);
    } catch (ex) {
        return date;
    }
}

var logDE;
function safeLog(stage, message) {
    try {
        if (!logDE) {
            logDE = DataExtension.Init(LOG_DE_KEY);
        }

        var formattedDate = Platform.Function.FormatDate(toLocal(new Date()), "yyyy-MM-dd HH:mm:ss");
        logDE.Rows.Add({
            Date: formattedDate,
            Note: "[WORKER " + requestContext.executionId + "] " + stage + " - " + message
        });
    } catch (ex) {
        // suppress logging errors
    }
}

function formatIso(date) {
    var dateObj = date instanceof Date ? date : new Date(date);
    return dateObj.toISOString().replace(".000Z", "Z");
}

function computeTargetDates() {
    var localNow = toLocal(new Date());
    var midnight = new Date(localNow);
    midnight.setHours(0, 0, 0, 0);
    var targetDate = new Date(midnight);
    targetDate.setDate(targetDate.getDate() - 1);
    var nextDate = new Date(targetDate);
    nextDate.setDate(nextDate.getDate() + 1);
    var startUtc;
    var endUtc;
    try {
        startUtc = Platform.Function.LocalDateToSystemDate(targetDate);
        endUtc = Platform.Function.LocalDateToSystemDate(nextDate);
    } catch (ex) {
        var offset = targetDate.getTimezoneOffset() * 60000;
        startUtc = new Date(targetDate.getTime() + offset);
        endUtc = new Date(nextDate.getTime() + nextDate.getTimezoneOffset() * 60000);
    }
    var startUtcDate = startUtc instanceof Date ? startUtc : new Date(startUtc);
    var endUtcDate = endUtc instanceof Date ? endUtc : new Date(endUtc);
    return {
        targetLocal: targetDate,
        startUtc: startUtcDate,
        endUtc: endUtcDate
    };
}

function parseJsonSafe(text, fallback) {
    try {
        return Platform.Function.ParseJSON(text);
    } catch (ex) {
        return fallback;
    }
}

function fetchAccessToken() {
    safeLog("BEFORE_AUTH", "Requesting OAuth token");
    var payload = {
        grant_type: "client_credentials",
        client_id: CLIENT_ID,
        client_secret: CLIENT_SECRET
    };
    var authResponse = HTTP.Post(AUTH_BASE + "/v2/token", "application/json", Platform.Function.Stringify(payload));
    safeLog("AFTER_AUTH", "Status: " + authResponse.StatusCode);

    if (authResponse.StatusCode < 200 || authResponse.StatusCode >= 300) {
        throw new Error("Authentication failed: HTTP " + authResponse.StatusCode);
    }

    var body = (authResponse.Response && authResponse.Response[0]) ? authResponse.Response[0] : "{}";
    var parsed = parseJsonSafe(body, {});

    if (!parsed || !parsed.access_token) {
        throw new Error("Authentication failed: access_token missing");
    }

    return {
        token: parsed.access_token,
        expiresIn: parsed.expires_in || parsed.expiresIn || null
    };
}

function retrieveConfigJourneys() {
    safeLog("BEFORE_CONFIG_LOAD", "Loading journey configuration");
    var proxy = new Script.Util.WSProxy();
    var columns = ["JourneyID"];
    var moreData = true;
    var request = null;
    var rows = [];
    var options = { BatchSize: 2500 };

    while (moreData) {
        request = proxy.retrieve("DataExtensionObject[" + CONFIG_DE_KEY + "]", columns, null, options);
        if (request && request.Results) {
            for (var i = 0; i < request.Results.length; i++) {
                var props = request.Results[i].Properties;
                var row = {};
                for (var j = 0; j < props.length; j++) {
                    row[props[j].Name] = props[j].Value;
                }
                if (row.JourneyID) {
                    rows.push(row);
                }
            }
        }

        if (request && request.HasMoreRows && request.ContinueRequest) {
            options.ContinueRequest = request.ContinueRequest;
        } else {
            moreData = false;
        }
    }

    safeLog("AFTER_CONFIG_LOAD", "Loaded " + rows.length + " journey configuration rows");
    return rows;
}

function normaliseUrl(url) {
    if (url.indexOf("http") === 0) {
        return url;
    }
    if (url.indexOf("/") === 0) {
        return REST_BASE + url;
    }
    return REST_BASE + "/" + url;
}

function buildFilter(definitionId, startIso, endIso) {
    var filter = "DefinitionID eq '" + definitionId + "' and EntryDate ge '" + startIso + "' and EntryDate lt '" + endIso + "'";
    var encoded = Platform.Function.URLEncode(filter);
    return encoded ? encoded.split("+").join("%20") : "";
}

function countJourneyEntries(accessToken, definitionId, startIso, endIso) {
    var total = 0;
    var processedPages = 0;
    var requestUrl = REST_BASE + "/interaction/v1/interactions/journeyhistory/entries?$page=1&$pageSize=2000&$filter=" + buildFilter(definitionId, startIso, endIso);

    while (requestUrl) {
        processedPages++;
        safeLog("BEFORE_JOURNEY_CALL", definitionId + " - requesting page " + processedPages);
        var httpRequest = new Script.Util.HttpRequest(requestUrl);
        httpRequest.method = "GET";
        httpRequest.retries = 2;
        httpRequest.continueOnError = true;
        httpRequest.addHeader("Authorization", "Bearer " + accessToken);
        httpRequest.addHeader("Content-Type", "application/json");
        var httpResponse = httpRequest.send();
        safeLog("AFTER_JOURNEY_CALL", definitionId + " - HTTP " + httpResponse.statusCode);

        if (httpResponse.statusCode < 200 || httpResponse.statusCode >= 300) {
            throw new Error("Journey History request failed for " + definitionId + " with HTTP " + httpResponse.statusCode);
        }

        var content = httpResponse.content || "{}";
        var parsed = parseJsonSafe(content, {});
        var items = parsed && parsed.items ? parsed.items : [];
        if (parsed && typeof parsed.count === "number" && (!parsed.items || parsed.items.length === 0) && processedPages === 1) {
            total = parsed.count;
            requestUrl = null;
            continue;
        }

        total += items.length;

        var nextLink = null;
        if (parsed && parsed.links && parsed.links.next) {
            nextLink = parsed.links.next;
        }

        if (nextLink) {
            requestUrl = normaliseUrl(nextLink);
        } else {
            requestUrl = null;
        }

        if (items.length === 0) {
            requestUrl = null;
        }
    }

    safeLog("PARSE", definitionId + " - counted " + total + " entries");
    return total;
}

function upsertDailyEntries(journeyId, count, targetDate) {
    var entriesDE = DataExtension.Init(DAILY_DE_KEY);
    var formattedDate = Platform.Function.FormatDate(targetDate, "yyyy-MM-dd HH:mm:ss");

    var filter = {
        LeftOperand: {
            Property: "JourneyID",
            SimpleOperator: "equals",
            Value: journeyId
        },
        LogicalOperator: "AND",
        RightOperand: {
            Property: "Date",
            SimpleOperator: "equals",
            Value: formattedDate
        }
    };

    var existing = entriesDE.Rows.Retrieve(filter);
    safeLog("CHECK_EXISTS", journeyId + " - existing rows: " + (existing ? existing.length : 0));

    if (existing && existing.length > 0) {
        safeLog("BEFORE_UPDATE", journeyId + " - updating row");
        entriesDE.Rows.Update({ DailyEntries: count }, ["JourneyID", "Date"], [journeyId, formattedDate]);
        safeLog("AFTER_UPDATE", journeyId + " - row updated to " + count);
        return "updated";
    } else {
        safeLog("BEFORE_INSERT", journeyId + " - inserting row");
        entriesDE.Rows.Add({
            JourneyID: journeyId,
            DailyEntries: count,
            Date: formattedDate
        });
        safeLog("AFTER_INSERT", journeyId + " - row inserted with " + count);
        return "inserted";
    }
}

function handleRequest() {
    var payloadText = Platform.Request.GetRequestBody() || "{}";
    var payload = parseJsonSafe(payloadText, {});
    if (payload && payload.executionId) {
        requestContext.executionId = payload.executionId;
    }

    safeLog("START", "Worker invoked. Method: " + requestContext.method + ", UA: " + requestContext.userAgent);

    if (requestContext.method !== "POST") {
        safeLog("ERROR", "Unsupported HTTP method: " + requestContext.method);
        return {
            status: "error",
            message: "Method not allowed. Use POST.",
            httpStatus: 405
        };
    }

    var auth = fetchAccessToken();
    var configRows = retrieveConfigJourneys();

    if (!configRows || configRows.length === 0) {
        safeLog("PARSE", "No journeys configured. Nothing to process");
        return {
            status: "ok",
            message: "No journeys configured",
            processedJourneys: 0,
            inserted: 0,
            updated: 0,
            totalEntries: 0
        };
    }

    var dates = computeTargetDates();
    var startIso = formatIso(dates.startUtc);
    var endIso = formatIso(dates.endUtc);
    var summary = {
        processedJourneys: 0,
        inserted: 0,
        updated: 0,
        totalEntries: 0
    };

    safeLog("PARSE", "Processing " + configRows.length + " journeys for date " + Platform.Function.FormatDate(dates.targetLocal, "yyyy-MM-dd"));

    for (var i = 0; i < configRows.length; i++) {
        var journeyId = configRows[i].JourneyID;
        if (!journeyId) {
            continue;
        }

        summary.processedJourneys++;
        var count = countJourneyEntries(auth.token, journeyId, startIso, endIso);
        summary.totalEntries += count;
        var action = upsertDailyEntries(journeyId, count, dates.targetLocal);
        if (action === "inserted") {
            summary.inserted++;
        } else if (action === "updated") {
            summary.updated++;
        }
    }

    safeLog("PARSE_DONE", "Processed " + summary.processedJourneys + " journeys");
    safeLog("FINAL", "Inserted: " + summary.inserted + ", Updated: " + summary.updated + ", Total entries: " + summary.totalEntries);

    return {
        status: "ok",
        processedJourneys: summary.processedJourneys,
        inserted: summary.inserted,
        updated: summary.updated,
        totalEntries: summary.totalEntries,
        startDateUtc: startIso,
        endDateUtc: endIso
    };
}

var responseBody;
var statusCode = 200;

try {
    responseBody = handleRequest();
    if (responseBody && responseBody.httpStatus) {
        statusCode = responseBody.httpStatus;
        delete responseBody.httpStatus;
    }
} catch (ex) {
    statusCode = 500;
    safeLog("ERROR", String(ex));
    responseBody = {
        status: "error",
        message: String(ex)
    };
}

Platform.Response.SetStatus(statusCode, statusCode === 200 ? "OK" : "ERROR");
Platform.Response.SetResponseHeader("Content-Type", "application/json");
Write(Platform.Function.Stringify(responseBody));
Platform.Response.End();
</script>
