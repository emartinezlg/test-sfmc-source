<!DOCTYPE html>
<html>
<head>
    <title>Journey Data Collection Worker - Diagnostic Mode</title>
</head>
<body>

<script runat="server">
// IMMEDIATE LOGGING ATTEMPT #1
try {
    var logRows1 = Platform.Function.CreateObject("DataExtensionObject");
    Platform.Function.SetObjectProperty(logRows1, "CustomerKey", "8BF29E68-F498-4A4F-BE50-E1CE24B7C300");
    Platform.Function.AddObjectArrayItem(logRows1, "Properties", {
        "Name": "Date",
        "Value": new Date()
    });
    Platform.Function.AddObjectArrayItem(logRows1, "Properties", {
        "Name": "Note",
        "Value": "IMMEDIATE_LOG_1 - CloudPage SSJS started execution"
    });
    Platform.Function.InvokeCreate(logRows1);
} catch (ex1) {
    // Silent failure
}

// Load Core library
try {
    Platform.Load("Core", "1.1.1");
    
    // IMMEDIATE LOGGING ATTEMPT #2 - After Core load
    var logRows2 = Platform.Function.CreateObject("DataExtensionObject");
    Platform.Function.SetObjectProperty(logRows2, "CustomerKey", "8BF29E68-F498-4A4F-BE50-E1CE24B7C300");
    Platform.Function.AddObjectArrayItem(logRows2, "Properties", {
        "Name": "Date",
        "Value": new Date()
    });
    Platform.Function.AddObjectArrayItem(logRows2, "Properties", {
        "Name": "Note",
        "Value": "IMMEDIATE_LOG_2 - Core library loaded successfully"
    });
    Platform.Function.InvokeCreate(logRows2);
    
} catch (ex2) {
    // Try alternative logging if Core fails
    try {
        var altLog = Platform.Function.CreateObject("DataExtensionObject");
        Platform.Function.SetObjectProperty(altLog, "CustomerKey", "8BF29E68-F498-4A4F-BE50-E1CE24B7C300");
        Platform.Function.AddObjectArrayItem(altLog, "Properties", {
            "Name": "Date",
            "Value": new Date()
        });
        Platform.Function.AddObjectArrayItem(altLog, "Properties", {
            "Name": "Note",
            "Value": "CORE_LOAD_ERROR - " + String(ex2)
        });
        Platform.Function.InvokeCreate(altLog);
    } catch (ex3) {
        // Complete failure - will show in HTML output
    }
}

// Global variables for tracking
var executionStage = "INIT";
var errorCount = 0;
var logCount = 0;

// Ultra-safe logging function
function safelog(stage, message) {
    try {
        executionStage = stage;
        var timestamp = new Date();
        
        // Method 1: Platform.Function.CreateObject
        try {
            var logRows = Platform.Function.CreateObject("DataExtensionObject");
            Platform.Function.SetObjectProperty(logRows, "CustomerKey", "8BF29E68-F498-4A4F-BE50-E1CE24B7C300");
            Platform.Function.AddObjectArrayItem(logRows, "Properties", {
                "Name": "Date",
                "Value": timestamp
            });
            Platform.Function.AddObjectArrayItem(logRows, "Properties", {
                "Name": "Note",
                "Value": stage + " - " + message
            });
            
            var result = Platform.Function.InvokeCreate(logRows);
            logCount++;
            return true;
        } catch (logEx1) {
            // Method 2: Try WSProxy as fallback
            try {
                var api = new Script.Util.WSProxy();
                var props = [
                    {
                        Name: "Date",
                        Value: timestamp
                    },
                    {
                        Name: "Note", 
                        Value: stage + " - " + message + " [FALLBACK_LOG]"
                    }
                ];
                
                var obj = {
                    CustomerKey: "8BF29E68-F498-4A4F-BE50-E1CE24B7C300",
                    Properties: props
                };
                
                var wsResult = api.create("DataExtensionObject", obj);
                logCount++;
                return true;
            } catch (logEx2) {
                errorCount++;
                return false;
            }
        }
    } catch (mainLogEx) {
        errorCount++;
        return false;
    }
}

// Start main execution with extensive logging
try {
    safelog("MAIN_START", "Beginning main execution block");
    
    // Test 1: Basic Platform functionality
    safelog("TEST_PLATFORM", "Testing basic Platform functions");
    var testDate = new Date();
    var testString = String(testDate);
    safelog("TEST_PLATFORM_RESULT", "Date test successful: " + testString);
    
    // Test 2: Request information
    try {
        var userAgent = Platform.Request.GetRequestHeader("User-Agent") || "unknown";
        var method = Platform.Request.Method || "unknown";
        var queryString = Platform.Request.QueryString || "none";
        safelog("REQUEST_INFO", "UA: " + userAgent + ", Method: " + method + ", QS: " + queryString);
    } catch (reqEx) {
        safelog("REQUEST_ERROR", "Request info error: " + String(reqEx));
    }
    
    // Test 3: Variable setting
    try {
        Platform.Variable.SetValue("testVar", "success");
        var testVar = Platform.Variable.GetValue("testVar");
        safelog("VARIABLE_TEST", "Variable test result: " + testVar);
    } catch (varEx) {
        safelog("VARIABLE_ERROR", "Variable test error: " + String(varEx));
    }
    
    // Test 4: WSProxy basic functionality
    try {
        var testProxy = new Script.Util.WSProxy();
        if (testProxy) {
            safelog("WSPROXY_TEST", "WSProxy object created successfully");
        } else {
            safelog("WSPROXY_TEST", "WSProxy object is null/undefined");
        }
    } catch (proxyEx) {
        safelog("WSPROXY_ERROR", "WSProxy creation error: " + String(proxyEx));
    }
    
    // Test 5: Data Extension access test
    safelog("DE_ACCESS_START", "Testing Data Extension access");
    
    try {
        // Test read access to log DE itself
        var api = new Script.Util.WSProxy();
        var cols = ["Date", "Note"];
        var filter = {
            Property: "Date",
            SimpleOperator: "greaterThan",
            Value: new Date(Date.now() - 3600000) // Last hour
        };
        
        var testResults = api.retrieve("DataExtensionObject[8BF29E68-F498-4A4F-BE50-E1CE24B7C300]", cols, filter);
        
        if (testResults) {
            var status = testResults.Status || "unknown";
            var resultCount = (testResults.Results && testResults.Results.length) || 0;
            safelog("DE_READ_TEST", "Log DE read test - Status: " + status + ", Results: " + resultCount);
        } else {
            safelog("DE_READ_TEST", "Log DE read test returned null");
        }
        
    } catch (deEx) {
        safelog("DE_ACCESS_ERROR", "Data Extension test error: " + String(deEx));
    }
    
    // Test 6: Journey Config DE access
    try {
        safelog("JOURNEY_CONFIG_START", "Testing Journey Config DE access");
        var configAPI = new Script.Util.WSProxy();
        var configCols = ["JourneyID"];
        var configResults = configAPI.retrieve("DataExtensionObject[C2B8BD86-B9B4-490F-A5C6-5F3B0088A10B]", configCols);
        
        if (configResults && configResults.Status) {
            var configStatus = configResults.Status;
            var configCount = (configResults.Results && configResults.Results.length) || 0;
            safelog("JOURNEY_CONFIG_RESULT", "Config DE Status: " + configStatus + ", Records: " + configCount);
            
            // Log first few journey IDs if found
            if (configResults.Results && configResults.Results.length > 0) {
                for (var i = 0; i < Math.min(3, configResults.Results.length); i++) {
                    var props = configResults.Results[i].Properties;
                    if (props) {
                        for (var j = 0; j < props.length; j++) {
                            if (props[j].Name === "JourneyID") {
                                safelog("JOURNEY_ID_" + i, "Found JourneyID: " + props[j].Value);
                                break;
                            }
                        }
                    }
                }
            }
        } else {
            safelog("JOURNEY_CONFIG_RESULT", "Config DE query returned null or no status");
        }
        
    } catch (configEx) {
        safelog("JOURNEY_CONFIG_ERROR", "Journey Config access error: " + String(configEx));
    }
    
    // Test 7: Insert test record to entries DE
    try {
        safelog("INSERT_TEST_START", "Testing insert to Journey Entries DE");
        
        var testInsertRows = Platform.Function.CreateObject("DataExtensionObject");
        Platform.Function.SetObjectProperty(testInsertRows, "CustomerKey", "7C5E411C-0258-4B6D-BA21-58AD4BDCCDAC");
        Platform.Function.AddObjectArrayItem(testInsertRows, "Properties", {
            "Name": "JourneyID",
            "Value": "TEST-" + new Date().getTime()
        });
        Platform.Function.AddObjectArrayItem(testInsertRows, "Properties", {
            "Name": "Date",
            "Value": new Date()
        });
        Platform.Function.AddObjectArrayItem(testInsertRows, "Properties", {
            "Name": "DailyEntries",
            "Value": 999
        });
        
        var insertResult = Platform.Function.InvokeCreate(testInsertRows);
        safelog("INSERT_TEST_RESULT", "Test insert result: " + JSON.stringify(insertResult));
        
    } catch (insertEx) {
        safelog("INSERT_TEST_ERROR", "Test insert error: " + String(insertEx));
    }
    
    // Final status
    safelog("EXECUTION_COMPLETE", "All tests completed - Logs: " + logCount + ", Errors: " + errorCount);
    Platform.Variable.SetValue("executionResult", "DIAGNOSTIC_COMPLETE");
    Platform.Variable.SetValue("logCount", logCount);
    Platform.Variable.SetValue("errorCount", errorCount);
    Platform.Variable.SetValue("lastStage", executionStage);
    
} catch (mainEx) {
    // Final error logging attempt
    try {
        safelog("MAIN_EXCEPTION", "Main execution error: " + String(mainEx));
        Platform.Variable.SetValue("executionResult", "MAIN_ERROR: " + String(mainEx));
    } catch (finalEx) {
        Platform.Variable.SetValue("executionResult", "COMPLETE_FAILURE");
    }
}
</script>

<h1>Journey Data Collection Worker - Diagnostic Mode</h1>

<h2>Execution Summary</h2>
<p><strong>Result:</strong> %%=v(@executionResult)=%%</p>
<p><strong>Logs Written:</strong> %%=v(@logCount)=%%</p>
<p><strong>Errors:</strong> %%=v(@errorCount)=%%</p>
<p><strong>Last Stage:</strong> %%=v(@lastStage)=%%</p>
<p><strong>Current Time:</strong> %%=Format(Now(), "yyyy-MM-dd HH:mm:ss")=%%</p>

<h2>Manual Test Results</h2>
<div id="clientResults">
    <p>Loading client-side diagnostics...</p>
</div>

<script>
// Client-side diagnostics
document.addEventListener('DOMContentLoaded', function() {
    var results = [];
    results.push("Client-side JavaScript executed successfully");
    results.push("Page URL: " + window.location.href);
    results.push("User Agent: " + navigator.userAgent);
    results.push("Page load time: " + new Date().toISOString());
    
    document.getElementById('clientResults').innerHTML = results.map(function(r) {
        return '<p>✓ ' + r + '</p>';
    }).join('');
});
</script>

</body>
</html>
